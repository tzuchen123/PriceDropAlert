const axios = require('axios');
const cheerio = require('cheerio');
const { connectRedis, getLowestPrice, setLowestPrice } = require('./db/redis');
const { updateProduct } = require('./db/mongodb');
const db = require('./db/SQLite3');

require('dotenv').config();

// Âú®ÊáâÁî®Á®ãÂºèÂïüÂãïÊôÇÈÄ£Êé• Redis
(async () => {
    await connectRedis();
})();

async function fetchTrackedProducts() {
    return new Promise((resolve, reject) => {
        db.all('SELECT product_url FROM tracked_products', [], (err, rows) => {
            if (err) {
                console.error('‚ùå ÁÑ°Ê≥ïÊü•Ë©¢ SQLite:', err.message);
                reject(err);
            } else {
                resolve(rows.map(row => row.product_url));
            }
        });
    });
}

async function scrapeProductData(url) {
    try {
        const { data } = await axios.get(url);
        const $ = cheerio.load(data);

        const productName = $('.itemName').text().trim();
        const brandName = $('.brandeName a').text().trim();
        const originalPrice = $('.priceBefore').first().text().trim();
        const salePrice = $('.priceAfter').first().text().trim();
        const currentPrice = parseFloat((salePrice || originalPrice).replace(/[^0-9.]/g, '')) || Infinity;

        return {
            productName,
            brandName,
            originalPrice,
            salePrice,
            currentPrice,
            url,
            timestamp: new Date()
        };
    } catch (error) {
        console.error(`‚ùå Áà¨Âèñ ${url} Â§±Êïó:`, error.message);
        return null;
    }
}

async function checkPriceAndUpdate(url) {
    const productData = await scrapeProductData(url);
    console.log(productData);
    if (!productData) return;

    try {
        const historicalPrice = await getLowestPrice(url) || Infinity;
        const currentPrice = productData.currentPrice;

        if (currentPrice < historicalPrice) {
            console.log(`üîª ÂÉπÊ†º‰∏ãÈôç! ${productData.productName} $${historicalPrice} ‚Üí $${currentPrice}`);

            // **Êõ¥Êñ∞ Redis ÊúÄ‰ΩéÂÉπ**
            await setLowestPrice(url, currentPrice);

            // **Êõ¥Êñ∞ MongoDB**
            await updateProduct(productData);

            // **ÈÄöÁü•‰ΩøÁî®ËÄÖ**
            notifyUser(productData);
        } else {
            console.log(`üìà ÂÉπÊ†ºÊú™‰∏ãÈôç: ${productData.productName} Áï∂Ââç $${currentPrice}, Ê≠∑Âè≤ÊúÄ‰Ωé $${historicalPrice}`);
        }
    } catch (error) {
        console.error(`‚ùå Ê™¢Êü•ÂÉπÊ†ºÈåØË™§ (${url}):`, error);
    }
}

async function notifyUser(productData) {
    console.log(`üì¢ ÁôºÈÄÅÈÄöÁü•: ${productData.productName} ÂÉπÊ†ºÈôçËá≥ $${productData.currentPrice} üéâ`);
    // ÈÄôË£°ÂèØ‰ª•Âä†‰∏ä Email„ÄÅLINE„ÄÅTelegram Êàñ Webhook API ‰æÜÈÄöÁü•‰ΩøÁî®ËÄÖ
}

async function checkAllSales() {
    try {
        const urls = await fetchTrackedProducts();
        if (!urls || urls.length === 0) {
            console.log('‚ö†Ô∏è Ê≤íÊúâËøΩËπ§ÁöÑÂïÜÂìÅ');
            return;
        }

        for (const url of urls) {
            await checkPriceAndUpdate(url);
        }
    } catch (error) {
        console.error('‚ùå Áà¨ÂèñÈÅéÁ®ã‰∏≠ÁôºÁîüÈåØË™§:', error.message);
    }
}

checkAllSales();
